#+STARTUP: overview
#+TITLE: Settings

Settings that only work on my home computer. They will probably break other setups.

* Org
#+BEGIN_SRC emacs-lisp
(setq org-enforce-todo-dependencies t)
(setq org-track-ordered-property-with-tag t)
(setq org-agenda-todo-ignore-deadlines 'nil)
(setq org-agenda-todo-ignore-scheduled 'nil)
(setq org-agenda-tags-todo-honor-ignore-options t)
(setq org-agenda-dim-blocked-tasks 'invisible)
(setq org-agenda-log-mode-items '(clock))
(setq org-agenda-start-with-log-mode t)

;; Set todo states
(setq org-todo-keywords
      '((sequence "TODO(t!)" "WAIT(w!)" "INPROGRESS(i!)"
                  "|" "DONE(d!)" "CANCELLED(c!)")))

;; Set tags
(setq org-tag-persistent-alist nil)


;; Set global values
(setq org-global-properties
      '(("Effort_ALL" . "0:05 0:10 0:15 0:30 0:45 1:00 2:00 3:00 4:00 8:00")))

;; Set agenda files
;; inbox.org is for timekeeping purposes
(setq org-agenda-files '("~/pims/inbox.org"
                         "~/pims/todo.org"
                         "~/pims/calendar.org"))

(setq org-agenda-start-day "-4d")
(setq org-agenda-start-on-weekday nil)
(setq org-agenda-span 14)

(setq circ/pims/reference-directory "~/pims/reference/")

;; Link abbreviations
(setq org-link-abbrev-alist
      '(("ref"     . "file:~/pims/reference/%s")
        ("pims"    . "file:~/pims/%s")
        ("l.wiki"  . "http://billy/search?content=wikipedia_en_all_maxi&pattern=%s")
        ("l.emacs" . "http://billy/search?content=emacs.stackexchange.com_en_all&patten=%s")
        ("ddg"     . "https://duckduckgo.com/?q=%s")
        ("google"  . "http://www.google.com/search?q=")))

;; Set refile targets
(setq circ/org-reference-directory "~/pims/reference")
(setq org-refile-allow-creating-parent-nodes 'confirm)
(setq org-refile-use-outline-path 'file)
(setq org-refile-targets '(("~/pims/todo.org"     :maxlevel . 99)
                           ("~/pims/someday.org"  :maxlevel . 99)
                           ("~/pims/calendar.org" :maxlevel . 99)
                           ("~/pims/read.org"     :maxlevel . 99)))

;; Set archiving targets
;; Archiving something in ./projects.org goes to ./.projects.org_archive
(setq org-archive-location ".%s_archive::")

;; Custom agenda commands
(setq org-agenda-custom-commands
      '(("A" "Agenda" ((agenda "")
                       (tags-todo "STYLE=\"habit\"" ((org-agenda-overriding-header
                                                      "Habits\nBlue:   Not to be done          !: Today\nGreen:  Could have been done    *: Done that day\nYellow: Overdue the next day\nRed:    Overdue that day                                                   Today V")))
                       (tags "STYLE=\"timebucket\"" ((org-agenda-overriding-header "Time Buckets")))))
        ("T" "Tasks" ((tags "+PINNED=\"t\"-TODO=\"DONE\"-TODO=\"CANCELLED\"" ((org-agenda-overriding-header "Pinned")))
                      (tags "+TODO=\"INPROGRESS\"" ((org-agenda-overriding-header "In Progress")))
                      (tags "+TODO=\"TODO\"-DEADLINE={.+}-SCHEDULED={.+}" ((org-agenda-overriding-header "Todo")))
                      (tags "+TODO=\"WAIT\"" ((org-agenda-overriding-header "Wait")))))
        ("R" "Weekly Review" ((tags "+CATEGORY=\"inbox\"" ((org-agenda-overriding-header "Inbox")))
                              (tags "+PROJ&+CATEGORY=\"\"" ((org-agenda-overriding-header "Projects Without Category")))
                      (stuck "" ((org-agenda-overriding-header "Stuck")))))
        ("x" "x" ((tags-todo "+TODO=\"PROJECT\"")))))

(setq org-agenda-sorting-strategy '((agenda habit-down time-up priority-down category-keep)
                                    (todo priority-down category-keep)
                                    (tags priority-down category-up tag-up)
                                    (search category-keep)))

(setq org-default-notes-file "~/pims/inbox.org")
(setq org-capture-templates
      '(("n" "New Inbox Item"
         entry (file "~/pims/inbox.org")
         "* %^{Item}\n%?")
        ("b" "Micro Blog"
         entry (file "~/pims/microblog.org")
        "* %U - %^{Item}\n%?")
        ("c" "Clipboard"
         entry (file "~/pims/inbox.org")
         "* %^{Item}\n%x%?")
        ("t" "Clock in task"
         entry (file "~/pims/inbox.org")
         "* %^{Task}\n%?" :clock-in t :clock-keep t)
        ("a" "Appointment"
         entry (file+headline "~/pims/calendar.org" "Appointments")
         "* TODO %^{Appointment Title}\nSCHEDULED: %^t")
        ("e" "Event"
         entry (file+headline "~/pims/calendar.org" "Events")
         "* %^{Event Title}\n%^t")
        ("l" "Link"
         entry (file "~/pims/inbox.org")
         "* %a\n%U")
        ("m" "Emails")
        ("mf" "Follow up email" entry (file "~/pims/inbox.org")
         "* Follow up with %:from on %a\n%i%?")
        ("mr" "Read email" entry (file "~/pims/inbox.org")
         "* Read email %:from - %a\n%i%?")
        ))

(setq org-agenda-prefix-format '((agenda   . " %i %-12:c %-6:e%?-12t% s")
                                 (timeline . "  % s")
                                 (todo     . " %i %-12:c")
                                 (tags     . " %i %-12:c %-6:e")
                                 (search   . " %i %-12:c")))
(setq org-agenda-tags-column -80)
(setq org-habit-graph-column 60)

(setq org-show-context-detail '((agenda . canonical)
                                (bookmark-jump . lineage)
                                (isearch . lineage)
                                (default . ancestors)))

;; Functions to open org files
(defun circ/open-inbox      () (interactive) (find-file "~/pims/inbox.org"))
(defun circ/open-todo       () (interactive) (find-file "~/pims/todo.org"))
(defun circ/open-calendar   () (interactive) (find-file "~/pims/calendar.org"))
(defun circ/open-checklists () (interactive) (find-file "~/pims/checklists.org"))
(defun circ/open-someday    () (interactive) (find-file "~/pims/someday.org"))
(defun circ/open-read       () (interactive) (find-file "~/pims/read.org"))

;; Stuck projects search
(setq org-stuck-projects '("+PROJ/-DONE-CANCELLED" ("TODO" "WAIT" "INPROGRESS") nil ""))

(defun circ/org-refile-target (file headline)
  (let* ((pos (with-current-buffer (or (get-buffer file)
                                       (find-file-noselect file))
                (or (org-find-exact-headline-in-buffer headline)
                    (error "Can't find headline `%s'" headline))))
         (filepath (buffer-file-name (marker-buffer pos)))
         (rfloc (list headline filepath nil pos)))
    (org-refile nil nil rfloc)))

;; Automate filing process
(defun circ/pims/set-todo ()
  "Convert item under point into todo item"
  (interactive)
  (org-todo "TODO")
  (circ/org-set-tags)
  (org-set-effort)
  (org-refile nil nil '(nil "~/pims/todo.org" nil nil))
  (org-save-all-org-buffers))

(defun circ/pims/set-project ()
  "Convert item under point into project. Requires refiling to project after"
  (interactive)
  (let ((project-heading (read-string "Project Heading: "))
        (project-category (read-string "Project Category: ")))
    (org-demote)
    (org-todo "TODO")
    (circ/org-set-tags)
    (org-set-effort)
    (move-beginning-of-line nil)
    (insert "\n")
    (previous-line)
    (insert (format "* [/] %s" project-heading))
    (org-set-property "CATEGORY" project-category)
    (org-todo "TODO")
    (org-set-tags-to '("PROJ"))
    (circ/org-set-tags)
    (org-refile nil nil '(nil "~/pims/todo.org" nil nil))
    (org-save-all-org-buffers)))

(defun circ/pims/refile-to-tickler ()
  "Delay an inbox item until later"
  (interactive)
  (let ((headline (org-get-heading t t t t)))
    (org-edit-headline (concat "Review: " headline))
    (org-todo "TODO")
    (call-interactively 'org-schedule)
    (circ/org-refile-target "~/pims/calendar.org" "Tickler")))
#+END_SRC
