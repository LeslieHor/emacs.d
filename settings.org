#+STARTUP: overview
#+TITLE: Settings

Settings that only work on my home computer. They will probably break other setups.

* Org
#+BEGIN_SRC emacs-lisp
;; Set todo states
(setq org-todo-keywords
      '((sequence "TODO(t)" "WAIT(w)" "NEXT(n)" "PROJECT(p)"
                  "|" "DONE(d)" "CANCELLED(c)")))

;; Set tags
(setq org-tag-persistent-alist
      '((:startgroup    . nil)
        ("@anywhere"    . ?a)
        ("@work"        . ?w)
        ("@home"        . ?h)
        ("@errand"      . ?e)
        ("@email"       . ?m)
        ("@research"    . ?r)
        ("@programming" . ?p)
        ("@computer"    . ?c)
        ("@octavius"    . ?o)
        ("@nonus"       . ?n)
        (:endgroup      . nil)
        (:startgroup    . nil)
        (:endgroup      . nil)))

;; Set agenda files
;; inbox.org is for timekeeping purposes
(setq org-agenda-files '("~/pims/inbox.org"
                         "~/pims/todo.org"
                         "~/pims/.todo.org_archive"
                         "~/pims/calendar.org"
                         "~/pims/.calendar.org_archive"))

;; Cortex
(setq leslie/cortex/directory "~/pims/cortex")
(setq leslie/cortex/max-file-preview 200)

;; Link abbreviations
(setq org-link-abbrev-alist
      '(("cortex" . "file:~/pims/cortex/%s.org")
        ("pims"   . "file:~/pims/%s")
        ("google" . "http://www.google.com/search?q=")))


;; Set refile targets
(setq leslie/org-reference-directory "~/pims/cortex/reference")
(setq org-refile-allow-creating-parent-nodes 'confirm)
(setq org-refile-use-outline-path 'file)
(setq org-refile-targets '(("~/pims/todo.org" :level . 0)
                           ("~/pims/someday.org" :level . 1)
                           ("~/pims/calendar.org" :level . 1)
                           ("~/pims/read.org" :level . 1)))

;; Set archiving targets
;; Archiving something in ./projects.org goes to ./.projects.org_archive
(setq org-archive-location ".%s_archive::")

;; Custom agenda commants
(setq org-agenda-custom-commands
      '(("n" "NEXT" ((agenda "")
                     (tags-todo "STYLE=\"habit\"" ((org-agenda-overriding-header "Habits")))
                     (tags "+TODO=\"NEXT\"" ((org-agenda-overriding-header "Next")))
                     (tags "+TODO=\"WAIT\"" ((org-agenda-overriding-header "Wait")))))))

(setq org-agenda-sorting-strategy '((tags tag-up)
                                    (agenda habit-down time-up priority-down category-keep)
                                    (todo priority-down category-keep)
                                    (tags priority-down category-keep)
                                    (search category-keep)))

(setq org-default-notes-file "~/pims/inbox.org")
(setq org-capture-templates
      '(("n" "New Inbox Item"
         entry (file "~/pims/inbox.org")
         "* %^{Item}\n")
        ("c" "Clipboard"
         entry (file "~/pims/inbox.org")
         "* %x\n")
        ("t" "Clock in task"
         entry (file "~/pims/inbox.org")
         "* %^{Task}\n%?" :clock-in t :clock-keep t)
        ("b" "Microblog" ;; I don't know if this works
         entry (file+datetree "~/pims/microblog.org")
         "*%U\n%?\n")))

;; Functions to open org files
(defun leslie/open-inbox    () (interactive) (find-file "~/pims/inbox.org"))
(defun leslie/open-todo     () (interactive) (find-file "~/pims/todo.org"))
(defun leslie/open-calendar () (interactive) (find-file "~/pims/calendar.org"))
(defun leslie/open-someday  () (interactive) (find-file "~/pims/someday.org"))
(defun leslie/open-read     () (interactive) (find-file "~/pims/read.org"))

;; Stuck projects search
(setq org-stuck-projects '("/PROJECT" ("NEXT" "WAIT") nil ""))

;; Automate filing process
(defun leslie/pims/set-todo ()
  "Convert item under point into todo item"
  (interactive)
  (org-todo "NEXT")
  (org-set-tags-command)
  (org-refile nil nil '(nil "~/pims/todo.org" nil nil))
  (org-save-all-org-buffers))

(defun leslie/pims/set-project ()
  "Convert item under point into project. Requires refiling to project after"
  (interactive)
  (let ((project-heading (read-string "Project Heading: "))
        (project-category (read-string "Project Category: ")))
    (org-demote)
    (org-todo "NEXT")
    (org-set-tags-command)
    (move-beginning-of-line nil)
    (insert "\n")
    (previous-line)
    (insert (format "* %s" project-heading))
    (org-set-property "CATEGORY" project-category)
    (org-todo "PROJECT")
    (org-refile nil nil '(nil "~/pims/todo.org" nil nil))
    (org-save-all-org-buffers)))
#+END_SRC
