#+STARTUP: overview
#+TITLE: Settings

Settings that only work on my home computer. They will probably break other setups.

* Org
#+BEGIN_SRC emacs-lisp
(setq org-enforce-todo-dependencies t)
(setq org-agenda-todo-ignore-deadlines 'nil)
(setq org-agenda-todo-ignore-scheduled 'nil)
(setq org-agenda-tags-todo-honor-ignore-options t)
(setq org-agenda-dim-blocked-tasks 'invisible)

;; Set todo states
(setq org-todo-keywords
      '((sequence "TODO(t)" "WAIT(w)" "NEXT(n)" "PROJECT(p)" "INPROGRESS(i)"
                  "|" "DONE(d)" "CANCELLED(c)")))

;; Set tags
(setq org-tag-persistent-alist nil)

;; Set agenda files
;; inbox.org is for timekeeping purposes
(setq org-agenda-files '("~/pims/inbox.org"
                         "~/pims/todo.org"
                         "~/pims/calendar.org"))

(setq org-agenda-start-day "-4d")
(setq org-agenda-start-on-weekday nil)
(setq org-agenda-span 14)

;; Cortex
(setq circ/cortex/directory "~/pims/cortex")
(setq circ/cortex/reference-directory "~/pims/cortex/reference/")
(setq circ/cortex/max-file-preview 200)

;; Link abbreviations
(setq org-link-abbrev-alist
      '(("cortex"  . "file:~/pims/cortex/%s.org")
        ("ref"     . "file:~/pims/cortex/reference/%s")
        ("pims"    . "file:~/pims/%s")
        ("l.wiki"  . "http://billy/search?content=wikipedia_en_all_maxi&pattern=%s")
        ("l.emacs" . "http://billy/search?content=emacs.stackexchange.com_en_all&patten=%s")
        ("ddg"     . "https://duckduckgo.com/?q=%s")
        ("google"  . "http://www.google.com/search?q=")))


;; Set refile targets
(setq circ/org-reference-directory "~/pims/cortex/reference")
(setq org-refile-allow-creating-parent-nodes 'confirm)
(setq org-refile-use-outline-path 'file)
(setq org-refile-targets '(("~/pims/todo.org" :level . 1)
                           ("~/pims/someday.org" :level . 1)
                           ("~/pims/calendar.org" :level . 1)
                           ("~/pims/read.org" :level . 1)))

;; Set archiving targets
;; Archiving something in ./projects.org goes to ./.projects.org_archive
(setq org-archive-location ".%s_archive::")

;; Custom agenda commands
(setq org-agenda-custom-commands
      '(("A" "Agenda" ((agenda "")
                       (tags-todo "STYLE=\"habit\"" ((org-agenda-overriding-header
                                                      "Habits\nBlue:   Not to be done          !: Today\nGreen:  Could have been done    *: Done that day\nYellow: Overdue the next day\nRed:    Overdue that day                                         Today V")))
                       (tags "STYLE=\"timebucket\"" ((org-agenda-overriding-header "Time Buckets")))
                       (tags "+TODO=\"INPROGRESS\"" ((org-agenda-overriding-header "In Progress")))
                       (tags "+CATEGORY=\"inbox\"" ((org-agenda-overriding-header "Inbox")))
                       (tags "proj&+CATEGORY=\"\"" ((org-agenda-overriding-header "Projects Without Category")))
                       ))
        ("T" "Tasks" ((tags "+TODO=\"TODO\"-DEADLINE={.+}-SCHEDULED={.+}" ((org-agenda-overriding-header "Todo")))
                      (tags "+TODO=\"WAIT\"" ((org-agenda-overriding-header "Wait")))))
        ("x" "x" ((tags-todo "+TODO=\"PROJECT\"")))))

(setq org-agenda-sorting-strategy '((tags tag-up)
                                    (agenda habit-down time-up priority-down category-keep)
                                    (todo priority-down category-keep)
                                    (tags priority-down category-keep)
                                    (search category-keep)))

(setq org-default-notes-file "~/pims/inbox.org")
(setq org-capture-templates
      '(("n" "New Inbox Item"
         entry (file "~/pims/inbox.org")
         "* %^{Item}\n")
        ("c" "Clipboard"
         entry (file "~/pims/inbox.org")
         "* %x\n")
        ("t" "Clock in task"
         entry (file "~/pims/inbox.org")
         "* %^{Task}\n%?" :clock-in t :clock-keep t)
        ("b" "Microblog" ;; I don't know if this works
         entry (file+datetree "~/pims/microblog.org")
         "*%U\n%?\n")))

(setq org-agenda-prefix-format '((agenda   . " %i %-12:c%?-12t% s")
                                 (timeline . "  % s")
                                 (todo     . " %i %-12:c")
                                 (tags     . " %i %-12:c")
                                 (search   . " %i %-12:c")))
(setq org-agenda-tags-column -80)
(setq org-habit-graph-column 50)

;; Functions to open org files
(defun circ/open-inbox      () (interactive) (find-file "~/pims/inbox.org"))
(defun circ/open-todo       () (interactive) (find-file "~/pims/todo.org"))
(defun circ/open-calendar   () (interactive) (find-file "~/pims/calendar.org"))
(defun circ/open-checklists () (interactive) (find-file "~/pims/checklists.org"))
(defun circ/open-someday    () (interactive) (find-file "~/pims/someday.org"))
(defun circ/open-read       () (interactive) (find-file "~/pims/read.org"))

;; Stuck projects search
(setq org-stuck-projects '("/PROJECT" ("NEXT" "WAIT" "INPROGRESS") nil ""))

;; Automate filing process
(defun circ/pims/set-todo ()
  "Convert item under point into todo item"
  (interactive)
  (org-todo "NEXT")
  (org-set-tags-command)
  (org-refile nil nil '(nil "~/pims/todo.org" nil nil))
  (org-save-all-org-buffers))

(defun circ/pims/set-project ()
  "Convert item under point into project. Requires refiling to project after"
  (interactive)
  (let ((project-heading (read-string "Project Heading: "))
        (project-category (read-string "Project Category: ")))
    (org-demote)
    (org-todo "NEXT")
    (org-set-tags-command)
    (move-beginning-of-line nil)
    (insert "\n")
    (previous-line)
    (insert (format "* [/] %s" project-heading))
    (org-set-property "CATEGORY" project-category)
    (org-todo "PROJECT")
    (org-refile nil nil '(nil "~/pims/todo.org" nil nil))
    (org-save-all-org-buffers)))
#+END_SRC
